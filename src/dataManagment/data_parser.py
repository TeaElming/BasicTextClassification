from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer


class DataParser:
  def __init__(self, use_tfidf=True, max_features=None):
    """
    Initialise the DataParser.

    Args:
      use_tfidf (bool): If True, use TF-IDF; otherwise, use Bag-of-Words.
      max_features (int): Maximum number of features to retain (optional).
    """
    self.use_tfidf = use_tfidf
    self.max_features = max_features
    self.vectoriser = None

  def fit_transform(self, texts):
    """
    Fits the vectoriser to the texts and transforms them into feature vectors.
      Fitting: learning vocab by mapping unique words to indices.
      Transforming: Creating numerical rep as a matrix based on fitted vocab.

    Args:
      texts (list): List of raw text articles.

    Returns:
      X (sparse matrix): Transformed feature matrix
    """

    # Choose vectoriser based on Boolean in init
    if self.use_tfidf:
      self.vectoriser = TfidfVectorizer(
          # stop_words='english' allows us to remove common stop words (and, or, the)
          max_features=self.max_features, stop_words='english')
    else:
      self.vectoriser = CountVectorizer(
          # TODO: Ask if this is allowed, can we remove the stop words??
          max_features=self.max_features, stop_words='english')

    # Fit and transform the texts
    return self.vectoriser.fit_transform(texts)

  def transform(self, texts):
    """
    Transforms new texts into feature vectors using the fitted vectoriser.

    Args:
        texts (list): List of raw text articles.

    Returns:
        X (sparse matrix): Transformed feature matrix.
    """
    if not self.vectoriser:
      raise ValueError(
          "The vectoriser is not fitted. Call fit_transform first.")
    return self.vectoriser.transform(texts)

  def get_feature_names(self):
    """
    Returns the feature names (words) generated by the vectoriser.

    Returns:
        feature_names (list): List of feature names.
    """
    if not self.vectoriser:
      raise ValueError(
          "The vectoriser is not fitted. Call fit_transform first.")
    return self.vectoriser.get_feature_names_out()
